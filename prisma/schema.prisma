generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  bannedFrom    Product[] @relation("BannedUsers")
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  id         Int       @id @default(autoincrement())
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([identifier, token])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  licenses    License[]
  orders      Order[]
  bannedUsers User[]    @relation("BannedUsers")
  maxPerUser  Int       @default(1)
}

model License {
  id        String   @id @default(cuid())
  key       String   @unique
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String?
  order     Order?   @relation(fields: [orderId], references: [id])
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  licenses  License[]
  status    Status    @default(PENDING)
  amount    Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PAID
  FAILED
}